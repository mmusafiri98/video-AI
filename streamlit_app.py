import streamlit as st
from gradio_client import Client

# Connexion au mod√®le h√©berg√© sur Hugging Face
client = Client("Muyumba/Qwen-Qwen-Image-Edit")

st.set_page_config(page_title="Qwen Image Generator", layout="centered")

st.title("üé® Qwen Image Generator")
st.write("T√©l√©charge une image et d√©cris le style que tu veux. Le mod√®le g√©n√®re automatiquement une nouvelle image.")

# Champ texte pour la description
instruction = st.text_area("üìù D√©cris le type d‚Äôimage que tu veux g√©n√©rer :", 
                           placeholder="Exemple : transforme l‚Äôimage en style dessin anim√©...")

# T√©l√©versement d‚Äôimage
uploaded_file = st.file_uploader("üì§ T√©l√©charge une image (jpg, png, jpeg)", type=["jpg", "jpeg", "png"])

# Si l'utilisateur a donn√© une image ET une description
if uploaded_file is not None and instruction.strip():
    st.image(uploaded_file, caption="üì∏ Image originale", use_column_width=True)

    with st.spinner("‚è≥ G√©n√©ration en cours..."):
        try:
            # Appel au mod√®le Hugging Face
            result = client.predict(
                uploaded_file,   # image t√©l√©vers√©e
                instruction,     # description donn√©e par l‚Äôutilisateur
                api_name="/predict"
            )

            # Affichage du r√©sultat
            if isinstance(result, str):  # si le mod√®le retourne une URL ou un chemin
                st.image(result, caption="üñºÔ∏è Image g√©n√©r√©e", use_column_width=True)
            elif isinstance(result, list) and len(result) > 0:
                st.image(result[0], caption="üñºÔ∏è Image g√©n√©r√©e", use_column_width=True)
            else:
                st.error("‚ùå R√©sultat inattendu du mod√®le :")
                st.write(result)

        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration : {e}")

